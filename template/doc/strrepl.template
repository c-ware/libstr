.TH "strcount" "cware" "April 2nd, 2022" "" "C-Ware Manual"

.SH NAME
strrepl - in-place string find and replace

.SH SYNOPSIS
.B #include <cware/libstring/libstring.h>

.BI "int strrepl(char *" "string" ", const char *" "find" ", const char *" "replace" ", size_t " "size" ");"

.SH DESCRIPTION
The
.B strrepl
function replaces all occurrences of
.I find
in
.I string
with
.IR replace ,
in-place. This means that the function does not allocate any extra space during the replacement,
and instead opts for shifting parts of the buffer around. This function is also intended to work
with stack arrays. Because of that, this function will not, and cannot expand the buffer to make
room for large replacements. Instead,
.B strrepl will .I not
perform the replacement if the
.B final size
is beyond the capacity of the buffer.

When
.IR string ,
.IR find ,
or
.IR replace
are
.BR NULL,
an error will printed to the stderr, and the program will exit. An error will also occur if the
.I string
argument has a longer length than the size of the buffer, determined by
.IR size .

.I string
will be the string buffer to replace in
.br
.I find
will be the string to replace
.br
.I replace
will be what
.B find
is substituted with
.br
.I size
will be the maximum length of the buffer

.SH RETURN VALUE
This function returns the number of times
.I find
was replaced. If the replacement could not be
performed, which would be because of the buffer's size being too small, then -1 will
be returned.

.SH EXAMPLES
/*
 * This example showcases how to use the
.B strrepl
function.
.br
*/

#include <stdio.h>
.br
#include <string.h>
.br
#include <stdlib.h>
.br
#include <cware/libstring/libstring.h>
.br

int main(void) {
    char string[256 + 1] = {0};

    strcat(string, "foo bar baz");
    strrepl(string, " ", "__", 256);

    printf("%s\\n", string);

    return EXIT_SUCCESS;
.br
}

.SH CONFORMING TO
This function conforms to C89.

.SH SEE ALSO
.BR cware (cware),
.BR libstring (cware)
